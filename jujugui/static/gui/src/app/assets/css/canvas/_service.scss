.service {
  // scss-lint:disable PlaceholderInExtend
  @extend .visibility-classes;
  // scss-lint:enable PlaceholderInExtend
  cursor: pointer;
  fill: none;
  stroke: none;

  .service-block {
    transition: all 0.3s;
  }

  .relation-button {
    transform: translate(95px, 30px);
    transition: transform 0.3s;

    &__image {
      pointer-events: none;
    }
  }

  .relation-button__link {
    cursor: pointer;

    &:focus,
    &:active,
    &:hover {
      fill: $white;
    }
  }

  &.highlight {
    .service-block {
      fill: $white;
    }
  }

  &.is-erroring {
    .service-block {
      stroke: $service-erroring;
      stroke-width: 3;
    }
  }

  &.is-pending {
    .service-block {
      stroke: $service-pending;
      stroke-width: 3;
    }
  }

  &.is-running {
    .service-block {
      stroke: $dark-warm-grey;
      stroke-width: 1;
    }
  }

  &.is-exposed {
    .service-block {
      stroke-width: 4;
    }
  }

  .service-block__halo {
    opacity: 0;
    // scss-lint:disable PropertySpelling
    r: 90;
    // scss-lint:enable PropertySpelling
    transition: all 0.3s;
  }

  &.hover,
  &:focus,
  &:active,
  &:hover {
    .service-block__halo {
      opacity: 1;
      // scss-lint:disable PropertySpelling
      r: 110;
      // scss-lint:enable PropertySpelling
      stroke-width: 1;
    }

    &.is-uncommitted .service-block__halo,
    .service-block__halo {
      stroke: $service-uncommitted;
    }

    &.is-erroring .service-block__halo {
      stroke: $service-erroring;
    }

    &.is-pending .service-block__halo {
      stroke: $service-pending;
    }

    &.is-running .service-block__halo {
      stroke: $dark-warm-grey;
    }

    .service-block {
      fill: $white;
    }

    .relation-button {
      transform: translate(95px, -30px);
    }
  }

  &.subordinate {
    .service-block__halo {
      // scss-lint:disable PropertySpelling
      r: 60;
      // scss-lint:enable PropertySpelling
      stroke: $dark-warm-grey;
    }

    .relation-button {
      transform: translate(65px, 30px);
    }

    // scss-lint:disable NestingDepth
    &.hover,
    &:focus,
    &:active,
    &:hover {
      .service-block__halo {
        // scss-lint:disable PropertySpelling
        r: 80;
        // scss-lint:enable PropertySpelling
      }

      .relation-button {
        transform: translate(65px, -30px);
      }
    }
    // scss-lint:enable NestingDepth

    .sub-rel-count {
      fill: $dark-warm-grey;
    }
  }

  &.is-selected {
    .service-block__halo {
      -webkit-animation: serviceBlockHaloSelected 1s alternate;
      animation: serviceBlockHaloSelected 1s alternate;
      fill: $service-uncommitted;
      opacity: 0.3;
      // scss-lint:disable PropertySpelling
      r: 110;
      // scss-lint:enable PropertySpelling
      stroke-width: 0;
    }

    .relation-button {
      transform: translate(95px, -30px);
    }

    &.is-erroring .service-block__halo {
      fill: $service-erroring;
    }

    &.is-pending .service-block__halo {
      fill: $service-pending;
    }

    &.is-running .service-block__halo {
      fill: $dark-warm-grey;
    }

    &.subordinate {
      // scss-lint:disable NestingDepth
      .service-block__halo {
        fill: $dark-warm-grey;
        // scss-lint:disable PropertySpelling
        r: 80;
        // scss-lint:enable PropertySpelling
      }

      .relation-button {
        transform: translate(65px, -30px);
      }
      // scss-lint:enable NestingDepth
    }

    .service-block {
      fill: $white;
    }

    @-webkit-keyframes serviceBlockHaloSelected {
      0% {
        opacity: 0;
      }
      100% {
        opacity: 0.3;
      }
    }
    @keyframes serviceBlockHaloSelected {
      0% {
        opacity: 0;
      }
      100% {
        opacity: 0.3;
      }
    }
  }
}

// Hide all relation buttons from relation when dragging
.drag-relation-group ~ .service .relation-button {
  // scss-lint:disable ImportantRule
  transform: translate(95px, 30px) !important;
  transition: none !important;
  // scss-lint:enable ImportantRule
}

.visibility-classes {
  transition: opacity 0.4s ease;

  &.show {
    opacity: 1;
  }

  &.fade {
    opacity: 0.3;
  }

  &.hide {
    // Put visibility on a delay so it gets hidden after the opacity is
    // finished transitioning.
    opacity: 0;
    transition: visibility 0s linear 0.4s, opacity 0.4s ease;
    visibility: hidden;
  }
}
