      // Replace the real app starting function with one that is more suitable
      // for testing.
      startTheApp = function() {
        appStarted = true;
      };

      getDocument = function() {
        return {
          getElementById: function(id) {
            if (id === 'browser-warning') {
              return {style: warningStyle};
            } else if (id === 'loading-message') {
              return {style: loadingStyle};
            } else if (id === 'loading-spinner') {
              return {};
            } else {
              // This should not happen.
              throw 'Unknown ID requested: ' + id;
            }
          }
        };
      };
    });

    it('knows that Chrome is supported', function() {
      assert.isTrue(isBrowserSupported('Chrome'));
    });

    it('knows that Firefox is supported', function() {
      assert.isTrue(isBrowserSupported('Firefox'));
    });

    it('knows that Safari is supported', function() {
      assert.equal(isBrowserSupported('Safari'), true);
    });

    it('knows that IE 10 is supported', function() {
      assert.isTrue(isBrowserSupported('MSIE 10.0'));
    });

    it('knows that <IE 10 is not supported', function() {
      assert.isFalse(isBrowserSupported('MSIE 9.0'));
    });

    it('can display the browser warning', function() {
      // The browser warning's style has not been touched yet.
      assert.isNull(loadingStyle.display);
      displayBrowserWarning();
      assert.equal(warningStyle.display, 'block');
    });

    it('will hide the browser warning when the user continues', function() {
      continueWithCurrentBrowser();
      assert.equal(warningStyle.display, 'none');
    });

    it('will display the loading message when the user continues', function() {
      continueWithCurrentBrowser();
      assert.equal(loadingStyle.display, 'block');
    });

    it('will stop event propigation when the user continues', function() {
      var result = continueWithCurrentBrowser();
      // Since the function is an event handler of a submit button and we do
      // not want the form submittion to actually happen, the handler must
      // return false.
      assert.isFalse(result);
    });

    it('will start the app when the user continues', function() {
      continueWithCurrentBrowser();
      assert.isTrue(appStarted);
    });

    it('will show a loading message after any browser wanting', function() {
      // If the browser is not supported, then the loading message will be
      // displayed after the browser warning.
      go('Browser that does not exist, and therefore is not supported');
      assert.equal(warningStyle.display, 'block');
      assert.equal(loadingStyle.display, 'none');
      continueWithCurrentBrowser();
      assert.equal(warningStyle.display, 'none');
      assert.equal(loadingStyle.display, 'block');
    });

    it('shows user dropdown button when hideLoginButton is true', function() {
      var getStartedMock = document.createElement('div');
      var userDropdownMock = document.createElement('div');
      hideLoginButton(getStartedMock, userDropdownMock, true);
      assert.equal(getStartedMock.className, '');
      assert.equal(userDropdownMock.className, 'hidden');
    });

    it('shows Get Started button when hideLoginButton is false', function() {
      var getStartedMock = document.createElement('div');
      var userDropdownMock = document.createElement('div');
      hideLoginButton(getStartedMock, userDropdownMock, false);
      assert.equal(getStartedMock.className, 'hidden');
      assert.equal(userDropdownMock.className, '');
    });

  });

}) ();
