#!/usr/bin/env python

# This file is part of the Juju GUI, which lets users view and manage Juju
# environments within a graphical interface (https://launchpad.net/juju-gui).
# Copyright (C) 2012-2013 Canonical Ltd.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License version 3, as published by
# the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
# SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


"""Check inline documentation of Javascript functions.

Parse the Javascript codebase, noting which functions are and which are not
documented. Also, compute the total number of documentation lines.

The file named "undocumented" lists the currently undocumented functions.
Once a function is documented, it should be manually removed from that file;
this script will complain if it is not.
"""

import os
import re
import string
import sys


# We don't want to build or integrate with a full JS parser; fortunately we
# comply with our coding style well enough that we can pick out the non-trivial
# function definitions because they are on a line by themselves and are either
# of the form "foo = function...", "foo: function..." or "function foo...".
function_regex = re.compile(
    '^ *(?:(\w+) *[:=] *function *|function +(\w+)) *\(')


def find_functions(source):
    """Iterable returning (line_number, line) for each function in source."""
    for line_number, line in enumerate(source):
        match = function_regex.match(line)
        if match:
            # Either the first or second group contains the function name.
            name = filter(bool, match.groups())[0]
            yield name, line_number


def find_docs(line_number, boundary, source):
    """Find the documentation for each function.

    In source, search for the documentation fragment starting from line_number
    and going backwards until boundary. Return the documentation found (as a
    sequence of lines) or an empty sequence if no documentation was found.
    """
    in_comment = False
    for current_line_number in range(line_number-1, boundary, -1):
        source_line = source[current_line_number].strip()
        if source_line.endswith('*/'):
            ending_line_number = current_line_number
            in_comment = True
        if source_line.startswith('/**'):
            # We found a documentation block, return it.
            return source[current_line_number:ending_line_number+1]
        elif source_line.startswith('/*'):
            # False alarm, keep looking.
            in_comment = False
        # If we enter or exit a block while scanning backwards without finding
        # documentation, then there is none to be found.
        if not in_comment and ('{' in source_line or '}' in source_line):
            return ()
    return ()


def lint_comment(lines, code_location):
    """Return a sequence of strings describing a particular comment's lint."""
    # Can an empty comment contain lint?  Who can know?
    if not lines:
        return ()
    lint = []
    def found(message):
        lint.append(code_location + ' ' + message)

    if lines[0].strip() != '/**':
        found('extra characters after the opening comment; just use "/**"')
    for line in lines:
        if len(line) > 1 and line[-2] in string.whitespace:
            found('unnecessary whitespace at the end of the line')
    initial_indent = len(lines[0].split('/', 1)[0])
    # XXX Once we settle on how to do indenting and if we like ASCII art
    # borders or not, this block of code can be uncommented and tweaked if
    # necessary.
#    for line in lines[1:-1]:
#        if line.strip().startswith('* '):
#            found('unapproved ASCII art (remove the border of * characters)')
#            # There is no need to report more than one of these errors per
#            # function and this condition would trigger the indentation error
#            # below.
#            break
#        if line[initial_indent:initial_indent+2] != '  ':
#            # Blank lines don't have to be indented.
#            if line.strip() == '':
#                continue
#            found('incorrect indent; the body of a comment should be indented '
#                'two spaces more than the opening "/**"')
#            # There is no need to report more than one of these errors per
#            # function.
#            break
    if lines[-1].strip() != '*/':
        found('extra characters before the closing comment; just use "*/"')
    return lint


def check_file(file_name, undocumented):
    """Check the documentation for each function in file_name.

    Check the documentation included in file_name, contrasting it with the
    undocumented list. Return all functions names found, the ones without
    documentation, the ones with one but listed as without, and the overall
    number of documentation lines.
    """
    # Every function.
    file_functions = set()
    # Every function that has unexpectedly missing documentation.
    missing_doc_functions = set()
    # Every function that has documentation but wasn't expected to.
    falsely_undoc_functions = set()
    # Accumulate the total number of doc lines.
    file_num_doc_lines = 0
    # All the other documenation lint found.
    other_lint = []
    with open(file_name) as f:
        source = f.readlines()
        boundary = 0
        for function_name, line_number in find_functions(source):
            file_functions.add((file_name, function_name))
            doc_lines = find_docs(line_number, boundary, source)
            boundary = line_number
            # Report our findings.
            code_location = '%s:%d "%s"' % (
                file_name, line_number+1, function_name)
            # Catalog any intra-comment lint.
            other_lint.extend(lint_comment(doc_lines, code_location))
            is_undocumented = (file_name, function_name) in undocumented
            # If we found documentation for the function...
            if doc_lines:
                file_num_doc_lines += len(doc_lines)
                # If it is listed as an undocumented function...
                if is_undocumented:
                    #...report the incongruence.
                    falsely_undoc_functions.add(code_location)
            # Otherwise if we found an undocumented function that is not
            # listed as undocumented, report it.
            elif not doc_lines and not is_undocumented:
                missing_doc_functions.add(code_location)

    return (file_functions, missing_doc_functions, falsely_undoc_functions,
        file_num_doc_lines, other_lint)


def read_undocumented_listing(lines):
    """Read the listing of legacy undocumented functions."""
    old_style = len(lines) and ':' not in lines[0]
    if old_style:
        raise RuntimeError('This version of the lint-yuidoc program can not '
            'read the old-style "undocumented" file.  Try regenerating it '
            'with --generate-undocumented.')

    new_style_regex = re.compile('([^:]+):\d+ "([^"]+)"')
    def parser(line):
        return new_style_regex.match(line).groups()
    return set(map(parser, lines))


def main(argv):
    """Check inline documentation of Javascript functions.

    Traverse the "app" subtree excluding all "assets" directories and
    parse all Javascript file not named "template.js". Report the total
    number of documentation lines, the total number of undocumented functions,
    and any discrepancies between the current status and the undocumented list.
    """
    in_generate_undocumented_file_mode = '--generate-undocumented' in argv
    # Did we find any lint?
    found_errors = False
    # All of the functions found.
    all_functions = set()
    total_num_doc_lines = 0
    if in_generate_undocumented_file_mode:
        undocumented = ()
    else:
        with open('undocumented') as f:
            undocumented = read_undocumented_listing(f.readlines())
    for root, dirs, files in os.walk('app'):
        # Ignore any asset directories.
        try:
            dirs.remove('assets')
        except ValueError:
            pass
        # Ignore the template.js file.
        files = [f for f in files if f.endswith('.js') and f != 'templates.js']
        for file_name in [os.path.join(root, name) for name in files]:
            (file_functions, missing_doc_functions, falsely_undoc_functions,
                file_num_doc_lines, other_lint) = check_file(
                    file_name, undocumented)
            all_functions.update(file_functions)
            for code_location in missing_doc_functions:
                if in_generate_undocumented_file_mode:
                    print code_location
                else:
                    print code_location, 'undocumented but not listed as such'
                    found_errors = True
            if in_generate_undocumented_file_mode:
                for code_location in falsely_undoc_functions:
                    print code_location, 'erroneously listed as undocumented'
                    found_errors = True
            else:
                # Tell the user about other documenation lint that was found.
                if other_lint:
                    found_errors = True
                for lint in other_lint:
                    print lint

            total_num_doc_lines += file_num_doc_lines

    if in_generate_undocumented_file_mode:
        # Nothing more to do.
        return 0

    print
    print 'Total documentation lines: %d' % total_num_doc_lines

    # Find functions that are listed as undocumented but don't actually exist.
    missing = set(undocumented) - all_functions
    for code_location in ['%s "%s"' % x for x in missing]:
        print code_location, 'listed as undocumented but does not exist'
        found_errors = True

    # Urge the user to drive down the number of known undocumented functions.
    print 'Backlog of undocumented functions:', len(undocumented)
    print 'Please do your part to drive the above to zero by documenting '
    print 'functions listed in the "undocumented" file and removing their '
    print 'entries therein.  The people of the future thank you.'

    return int(found_errors)


if __name__ == '__main__':
    sys.exit(main(sys.argv))
