#!/bin/sh

# This file is part of the Juju GUI, which lets users view and manage Juju
# environments within a graphical interface (https://launchpad.net/juju-gui).
# Copyright (C) 2012-2013 Canonical Ltd.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License version 3, as published by
# the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
# SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This script expects that the system has some dependencies already installed:
# sudo apt-get install python-shelltoolbox python-yaml juju

# This script will deploy the charm, using an alternate origin if given.  All
# arguments that are accepted by lib/deploy_charm_for_testing.py are
# recognized.  --origin and --charm are especially useful.  See
# docs/continuous-integration.rst for more information.

# If FAIL_FAST is set to 1 in the environment, the testing loop will exit when
# the first tested browser returns a failure, rather than trying them all.

# If NO_DESTROY is set, the juju environment will not be destroyed at the end
# of the test run.

# If APP_URL is set, rather than creating/destroying a juju environment for
# testing, the suite will use the given URL.

ENV='juju-gui-testing'

bootstrap_and_deploy() {
    # Bootstrap a juju enviroment and deploy the Juju GUI charm.
    virtualenv/bin/python lib/deploy_charm_for_testing.py "$@"
    retcode=$?
    if [ $retcode -ne 0 ]; then
        echo "Unable to deploy Charm."
        exit $retcode
    fi
}

get_app_url() {
    # Return the URL of the deployed Juju GUI application.
    addr=`juju status -e $ENV | grep public-address: | cut -d: -f2 | cut -c2-`
    echo "http://$addr"
}

run_tests() {
    # Run the CI tests.
    # retcode is used to keep track of test failures. If a test fails, this
    # function will exit with an error code.
    retcode=0
    # Run the browser tests against the app.
    for JUJU_GUI_TEST_BROWSER in ${JUJU_GUI_TEST_BROWSERS:-ie firefox chrome}
    do
        export JUJU_GUI_TEST_BROWSER
        echo "Launching $JUJU_GUI_TEST_BROWSER tests."
        virtualenv/bin/python test/test_charm_running.py -v || retcode=1
        if [ ${FAIL_FAST:-0} -eq 1 -a $retcode -eq 1 ]; then
            exit 1;
        fi
    done
    exit $retcode
}

on_exit() {
    # Destroy the environment, releasing the resources.
    echo "Quitting..."
    if [ $NO_DESTROY ]; then
        echo "The environment is still alive."
        echo "To run CI tests in this environment:\n  APP_URL=\"$APP_URL\" $0"
        echo "To destroy this environment:\n  juju destroy-environment -e $ENV"
    else
        yes | juju destroy-environment -e $ENV
    fi
    # Cleanup old internal IP address file if
    # one was created (in deploy for testing).
    if [ -e juju-internal-ip ]; then
        rm -f juju-internal-ip
    fi
}

# We use a virtualenv so we can have newer dependencies than the OS provides.
make virtualenv/bin/python

# Ensure we clean up things even if this script exits with an error.
trap on_exit EXIT

# Launch the script.
if [ $APP_URL ]; then
    export NO_DESTROY=1
else
    bootstrap_and_deploy $@
    export APP_URL=`get_app_url`
fi
echo "Env: $ENV\nAPP_URL: $APP_URL"
run_tests
